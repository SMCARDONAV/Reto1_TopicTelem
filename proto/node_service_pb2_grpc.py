# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from . import node_service_pb2 as node__service__pb2

GRPC_GENERATED_VERSION = '1.66.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in node_service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class NodeServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.JoinNetwork = channel.unary_unary(
                '/nodeservice.NodeService/JoinNetwork',
                request_serializer=node__service__pb2.Address.SerializeToString,
                response_deserializer=node__service__pb2.ResponseMessage.FromString,
                _registered_method=True)
        self.LeaveNetwork = channel.unary_unary(
                '/nodeservice.NodeService/LeaveNetwork',
                request_serializer=node__service__pb2.DefaultRequest.SerializeToString,
                response_deserializer=node__service__pb2.ResponseMessage.FromString,
                _registered_method=True)
        self.GetFingerTable = channel.unary_unary(
                '/nodeservice.NodeService/GetFingerTable',
                request_serializer=node__service__pb2.DefaultRequest.SerializeToString,
                response_deserializer=node__service__pb2.ResponseMessage.FromString,
                _registered_method=True)
        self.GetPredSucc = channel.unary_unary(
                '/nodeservice.NodeService/GetPredSucc',
                request_serializer=node__service__pb2.DefaultRequest.SerializeToString,
                response_deserializer=node__service__pb2.ResponseMessage.FromString,
                _registered_method=True)
        self.LookUpID = channel.unary_unary(
                '/nodeservice.NodeService/LookUpID',
                request_serializer=node__service__pb2.NodeId.SerializeToString,
                response_deserializer=node__service__pb2.JoinNodeResponse.FromString,
                _registered_method=True)
        self.ConnectPeer = channel.unary_unary(
                '/nodeservice.NodeService/ConnectPeer',
                request_serializer=node__service__pb2.Address.SerializeToString,
                response_deserializer=node__service__pb2.Address.FromString,
                _registered_method=True)
        self.UpdateFingerTable = channel.unary_unary(
                '/nodeservice.NodeService/UpdateFingerTable',
                request_serializer=node__service__pb2.DefaultRequest.SerializeToString,
                response_deserializer=node__service__pb2.Address.FromString,
                _registered_method=True)
        self.UpdatePredSucc = channel.unary_unary(
                '/nodeservice.NodeService/UpdatePredSucc',
                request_serializer=node__service__pb2.UpdatePredSuccRequest.SerializeToString,
                response_deserializer=node__service__pb2.Address.FromString,
                _registered_method=True)
        self.SearchFile = channel.unary_unary(
                '/nodeservice.NodeService/SearchFile',
                request_serializer=node__service__pb2.SearchFileRequest.SerializeToString,
                response_deserializer=node__service__pb2.SearchFileResponse.FromString,
                _registered_method=True)


class NodeServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def JoinNetwork(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LeaveNetwork(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetFingerTable(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPredSucc(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LookUpID(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConnectPeer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateFingerTable(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdatePredSucc(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SearchFile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_NodeServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'JoinNetwork': grpc.unary_unary_rpc_method_handler(
                    servicer.JoinNetwork,
                    request_deserializer=node__service__pb2.Address.FromString,
                    response_serializer=node__service__pb2.ResponseMessage.SerializeToString,
            ),
            'LeaveNetwork': grpc.unary_unary_rpc_method_handler(
                    servicer.LeaveNetwork,
                    request_deserializer=node__service__pb2.DefaultRequest.FromString,
                    response_serializer=node__service__pb2.ResponseMessage.SerializeToString,
            ),
            'GetFingerTable': grpc.unary_unary_rpc_method_handler(
                    servicer.GetFingerTable,
                    request_deserializer=node__service__pb2.DefaultRequest.FromString,
                    response_serializer=node__service__pb2.ResponseMessage.SerializeToString,
            ),
            'GetPredSucc': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPredSucc,
                    request_deserializer=node__service__pb2.DefaultRequest.FromString,
                    response_serializer=node__service__pb2.ResponseMessage.SerializeToString,
            ),
            'LookUpID': grpc.unary_unary_rpc_method_handler(
                    servicer.LookUpID,
                    request_deserializer=node__service__pb2.NodeId.FromString,
                    response_serializer=node__service__pb2.JoinNodeResponse.SerializeToString,
            ),
            'ConnectPeer': grpc.unary_unary_rpc_method_handler(
                    servicer.ConnectPeer,
                    request_deserializer=node__service__pb2.Address.FromString,
                    response_serializer=node__service__pb2.Address.SerializeToString,
            ),
            'UpdateFingerTable': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateFingerTable,
                    request_deserializer=node__service__pb2.DefaultRequest.FromString,
                    response_serializer=node__service__pb2.Address.SerializeToString,
            ),
            'UpdatePredSucc': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdatePredSucc,
                    request_deserializer=node__service__pb2.UpdatePredSuccRequest.FromString,
                    response_serializer=node__service__pb2.Address.SerializeToString,
            ),
            'SearchFile': grpc.unary_unary_rpc_method_handler(
                    servicer.SearchFile,
                    request_deserializer=node__service__pb2.SearchFileRequest.FromString,
                    response_serializer=node__service__pb2.SearchFileResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'nodeservice.NodeService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('nodeservice.NodeService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class NodeService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def JoinNetwork(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/nodeservice.NodeService/JoinNetwork',
            node__service__pb2.Address.SerializeToString,
            node__service__pb2.ResponseMessage.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def LeaveNetwork(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/nodeservice.NodeService/LeaveNetwork',
            node__service__pb2.DefaultRequest.SerializeToString,
            node__service__pb2.ResponseMessage.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetFingerTable(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/nodeservice.NodeService/GetFingerTable',
            node__service__pb2.DefaultRequest.SerializeToString,
            node__service__pb2.ResponseMessage.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetPredSucc(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/nodeservice.NodeService/GetPredSucc',
            node__service__pb2.DefaultRequest.SerializeToString,
            node__service__pb2.ResponseMessage.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def LookUpID(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/nodeservice.NodeService/LookUpID',
            node__service__pb2.NodeId.SerializeToString,
            node__service__pb2.JoinNodeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ConnectPeer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/nodeservice.NodeService/ConnectPeer',
            node__service__pb2.Address.SerializeToString,
            node__service__pb2.Address.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateFingerTable(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/nodeservice.NodeService/UpdateFingerTable',
            node__service__pb2.DefaultRequest.SerializeToString,
            node__service__pb2.Address.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdatePredSucc(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/nodeservice.NodeService/UpdatePredSucc',
            node__service__pb2.UpdatePredSuccRequest.SerializeToString,
            node__service__pb2.Address.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SearchFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/nodeservice.NodeService/SearchFile',
            node__service__pb2.SearchFileRequest.SerializeToString,
            node__service__pb2.SearchFileResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
